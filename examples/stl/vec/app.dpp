import opaque;
enum VectorSize = Problem.values.sizeof;
enum VectorIntSize = VectorInt.values.sizeof;

#include "v.hpp"
import std.stdio;
void main()
{
	import std.range:iota;
	import std.array:array;
	import std.algorithm:map,reverse;
	import std.conv:to;
	auto values = iota(100).map!(v=>v.to!double).array;
	auto v = problem(values.ptr,values.length);
	auto results = getVector!double(v.values);
	writeln(results);

	auto values2 = iota(10).map!(v=>v.to!double*v.to!double).array;
	writefln("original values2: %s",values2);
	auto v2 = Vector!double(values2);
	writefln("v2.length = %s",v2.length);
	printVector!double(cast(void*)v2.getBlob());
	writefln("v2.values= %s",v2.values);

	auto v3 = vector(v.values);
	writefln("v3.values = %s",v3.values);

	auto intValues = iota(100).array.reverse;
	auto iv = Vector!(int,VectorIntSize)(intValues);
	writefln("iv.length = %s",iv.length);
	writefln("iv.values = %s",iv.values);

}

alias VectorDouble = Opaque!("vector!(double)",VectorSize);
auto vector(VectorDouble opaque)
{
	return Vector!(double,opaque.blobSize).fromBlob(opaque.blob);
}
struct Vector(T,size_t Size=VectorSize)
{
	static Vector!(T,Size) fromBlob(ubyte[Size] blob)
	{
		Vector!(T,Size) ret;
		ret.values_ = blob;
		return ret;
	}
	this(T[] values)
	{
		createVector!T(this.values_.ptr,cast(void*)values.ptr,values.length);
	}

	T* ptr()
	{
		return cast(T*) getVectorData!T(values_.ptr);
	}
	size_t length()
	{
		return getVectorSize!T(this.values_.ptr);
	}
	T[] values()
	{
		return this.ptr()[0..this.length];
	}

	T opIndex(size_t index)
	{
		return this.values[index];
	}

	T[] opSlice(size_t start, size_t end)
	{
		return this.values[start..end];	
	}

	alias values this;
	ubyte[] getBlob()
	{
		return this.values_;
	}	
	private ubyte[Size] values_;
}

T[] getVector(T)(ubyte[] blob)
{
	auto size = getVectorSize!T(blob.ptr);
	auto data = cast(T*)getVectorData!T(blob.ptr);
	return data[0..size];
}

